export function convertClassesToInlineStyles(htmlString: string): string {
  const parser = new DOMParser();
  const doc = parser.parseFromString(htmlString, 'text/html');
  const elements = doc.querySelectorAll('[class]');

  const getClassProperties = (className: string): { [key: string]: string } => {
    const properties: { [key: string]: string } = {};
    for (const sheet of Array.from(document.styleSheets)) {
      try {
        const rules = sheet.cssRules || sheet.rules;
        for (const rule of Array.from(rules)) {
          if (rule instanceof CSSStyleRule && rule.selectorText === `.${className}`) {
            const style = rule.style;
            for (let i = 0; i < style.length; i++) {
              const prop = style.item(i); // kebab-case, e.g., background-color
              const value = style.getPropertyValue(prop);
              // Convert to camelCase, e.g., backgroundColor
              const inlineProp = prop.replace(/-([a-z])/g, (_, letter) => letter.toUpperCase());
              properties[inlineProp] = value;
            }
          }
        }
      } catch (e) {
        console.warn(`Cannot access stylesheet: ${sheet.href}`);
      }
    }
    return properties;
  };

  elements.forEach((element: HTMLElement) => {
    const classes = element.className.split(' ').filter(cls => cls);
    if (!classes.length) return;

    const inlineStyles: string[] = [];

    classes.forEach(className => {
      const props = getClassProperties(className);
      Object.entries(props).forEach(([prop, value]) => {
        inlineStyles.push(`${prop}: ${value};`);
      });
    });

    if (inlineStyles.length) {
      const existingStyle = element.getAttribute('style') || '';
      element.setAttribute('style', `${existingStyle} ${inlineStyles.join(' ')}`);
    }

    // Remove the class attribute
    element.removeAttribute('class');
  });

  return doc.body.innerHTML;
}
